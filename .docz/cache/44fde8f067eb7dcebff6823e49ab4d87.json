{"remainingRequest":"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/preset-env\",\"@babel/react\",[\"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-proposal-class-properties\",[\"module-resolver\",{\"root\":[\"./src\"]}],[\"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/docz-core/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/input-functions.js","dependencies":[{"path":"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/input-functions.js","mtime":1548007903856},{"path":"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/cache-loader/dist/cjs.js","mtime":1547306037965},{"path":"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/babel-loader/lib/index.js","mtime":1547246468683}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { isNil, find, has, mergeRight, is, isEmpty, concat } from 'ramda';\nexport var getFieldData = function getFieldData(fieldName, fields) {\n  return find(function (obj) {\n    return obj.name === fieldName;\n  }, fields);\n};\nexport var getValueForFieldData = function getValueForFieldData(fieldData) {\n  if (isNil(fieldData) || isNil(fieldData.value)) {\n    return '';\n  }\n\n  return fieldData.value;\n};\nexport var getErrorsForFieldData = function getErrorsForFieldData(fieldData) {\n  if (isNil(fieldData) || isNil(fieldData.errors)) {\n    return [];\n  }\n\n  return fieldData.errors;\n};\nexport var getInitialValue = function getInitialValue(fieldName, initialValue) {\n  if (has(fieldName, initialValue)) {\n    return initialValue[fieldName];\n  }\n\n  return '';\n};\nexport var insertValueInFieldData = function insertValueInFieldData(value, fieldData) {\n  return mergeRight(fieldData, {\n    value: value\n  });\n};\nexport var insertErrorsInFieldData = function insertErrorsInFieldData(errors, fieldData) {\n  if (is(Array, errors)) {\n    return mergeRight(fieldData, {\n      errors: concat(fieldData.errors, errors),\n      error: true\n    });\n  }\n\n  if (is(String, errors)) {\n    return mergeRight(fieldData, {\n      errors: concat(fieldData.errors, [errors]),\n      error: true\n    });\n  }\n\n  return fieldData;\n};\nexport var cleanErrorsInFieldData = function cleanErrorsInFieldData(fieldData) {\n  return mergeRight(fieldData, {\n    error: false,\n    errors: []\n  });\n};\nexport var checkRequiredFieldData = function checkRequiredFieldData(value, fieldData) {\n  if (fieldData.required === true && (isNil(value) || isEmpty(value))) {\n    return mergeRight(fieldData, {\n      error: true,\n      errors: [\"the field \".concat(fieldData.name, \" is required\")]\n    });\n  }\n\n  return fieldData;\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(getFieldData, \"getFieldData\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/input-functions.js\");\n  reactHotLoader.register(getValueForFieldData, \"getValueForFieldData\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/input-functions.js\");\n  reactHotLoader.register(getErrorsForFieldData, \"getErrorsForFieldData\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/input-functions.js\");\n  reactHotLoader.register(getInitialValue, \"getInitialValue\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/input-functions.js\");\n  reactHotLoader.register(insertValueInFieldData, \"insertValueInFieldData\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/input-functions.js\");\n  reactHotLoader.register(insertErrorsInFieldData, \"insertErrorsInFieldData\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/input-functions.js\");\n  reactHotLoader.register(cleanErrorsInFieldData, \"cleanErrorsInFieldData\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/input-functions.js\");\n  reactHotLoader.register(checkRequiredFieldData, \"checkRequiredFieldData\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/input-functions.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/input-functions.js"],"names":["isNil","find","has","mergeRight","is","isEmpty","concat","getFieldData","fieldName","fields","obj","name","getValueForFieldData","fieldData","value","getErrorsForFieldData","errors","getInitialValue","initialValue","insertValueInFieldData","insertErrorsInFieldData","Array","error","String","cleanErrorsInFieldData","checkRequiredFieldData","required"],"mappings":"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","sourcesContent":["import {\n  isNil, find, has, mergeRight, is, isEmpty, concat,\n} from 'ramda'\n\n\nexport const getFieldData = (fieldName, fields) => find(obj => obj.name === fieldName, fields)\n\nexport const getValueForFieldData = (fieldData) => {\n  if (isNil(fieldData) || isNil(fieldData.value)) {\n    return ''\n  }\n  return fieldData.value\n}\n\nexport const getErrorsForFieldData = (fieldData) => {\n  if (isNil(fieldData) || isNil(fieldData.errors)) {\n    return []\n  }\n  return fieldData.errors\n}\n\nexport const getInitialValue = (fieldName, initialValue) => {\n  if (has(fieldName, initialValue)) {\n    return initialValue[fieldName]\n  }\n  return ''\n}\n\nexport const insertValueInFieldData = (value, fieldData) => mergeRight(fieldData, { value })\n\nexport const insertErrorsInFieldData = (errors, fieldData) => {\n  if (is(Array, errors)) {\n    return mergeRight(fieldData, { errors: concat(fieldData.errors, errors), error: true })\n  }\n  if (is(String, errors)) {\n    return mergeRight(fieldData, { errors: concat(fieldData.errors, [errors]), error: true })\n  }\n  return fieldData\n}\n\nexport const cleanErrorsInFieldData = fieldData => mergeRight(fieldData, { error: false, errors: [] })\n\nexport const checkRequiredFieldData = (value, fieldData) => {\n  if (fieldData.required === true && (isNil(value) || isEmpty(value))) {\n    return mergeRight(fieldData, { error: true, errors: [`the field ${fieldData.name} is required`] })\n  }\n  return fieldData\n}\n"]}]}