{"remainingRequest":"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/preset-env\",\"@babel/react\",[\"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-proposal-class-properties\",[\"module-resolver\",{\"root\":[\"./src\"]}],[\"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/docz-core/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/input-functions.js","dependencies":[{"path":"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/input-functions.js","mtime":1548007903856},{"path":"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/cache-loader/dist/cjs.js","mtime":1547306037965},{"path":"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/babel-loader/lib/index.js","mtime":1547246468683}],"contextDependencies":[],"result":["import{isNil,find,has,mergeRight,is,isEmpty,concat}from'ramda';export var getFieldData=function getFieldData(fieldName,fields){return find(function(obj){return obj.name===fieldName;},fields);};export var getValueForFieldData=function getValueForFieldData(fieldData){if(isNil(fieldData)||isNil(fieldData.value)){return'';}return fieldData.value;};export var getErrorsForFieldData=function getErrorsForFieldData(fieldData){if(isNil(fieldData)||isNil(fieldData.errors)){return[];}return fieldData.errors;};export var getInitialValue=function getInitialValue(fieldName,initialValue){if(has(fieldName,initialValue)){return initialValue[fieldName];}return'';};export var insertValueInFieldData=function insertValueInFieldData(value,fieldData){return mergeRight(fieldData,{value:value});};export var insertErrorsInFieldData=function insertErrorsInFieldData(errors,fieldData){if(is(Array,errors)){return mergeRight(fieldData,{errors:concat(fieldData.errors,errors),error:true});}if(is(String,errors)){return mergeRight(fieldData,{errors:concat(fieldData.errors,[errors]),error:true});}return fieldData;};export var cleanErrorsInFieldData=function cleanErrorsInFieldData(fieldData){return mergeRight(fieldData,{error:false,errors:[]});};export var checkRequiredFieldData=function checkRequiredFieldData(value,fieldData){if(fieldData.required===true&&(isNil(value)||isEmpty(value))){return mergeRight(fieldData,{error:true,errors:[\"the field \".concat(fieldData.name,\" is required\")]});}return fieldData;};",{"version":3,"sources":["/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/input-functions.js"],"names":["isNil","find","has","mergeRight","is","isEmpty","concat","getFieldData","fieldName","fields","obj","name","getValueForFieldData","fieldData","value","getErrorsForFieldData","errors","getInitialValue","initialValue","insertValueInFieldData","insertErrorsInFieldData","Array","error","String","cleanErrorsInFieldData","checkRequiredFieldData","required"],"mappings":"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","sourcesContent":["import {\n  isNil, find, has, mergeRight, is, isEmpty, concat,\n} from 'ramda'\n\n\nexport const getFieldData = (fieldName, fields) => find(obj => obj.name === fieldName, fields)\n\nexport const getValueForFieldData = (fieldData) => {\n  if (isNil(fieldData) || isNil(fieldData.value)) {\n    return ''\n  }\n  return fieldData.value\n}\n\nexport const getErrorsForFieldData = (fieldData) => {\n  if (isNil(fieldData) || isNil(fieldData.errors)) {\n    return []\n  }\n  return fieldData.errors\n}\n\nexport const getInitialValue = (fieldName, initialValue) => {\n  if (has(fieldName, initialValue)) {\n    return initialValue[fieldName]\n  }\n  return ''\n}\n\nexport const insertValueInFieldData = (value, fieldData) => mergeRight(fieldData, { value })\n\nexport const insertErrorsInFieldData = (errors, fieldData) => {\n  if (is(Array, errors)) {\n    return mergeRight(fieldData, { errors: concat(fieldData.errors, errors), error: true })\n  }\n  if (is(String, errors)) {\n    return mergeRight(fieldData, { errors: concat(fieldData.errors, [errors]), error: true })\n  }\n  return fieldData\n}\n\nexport const cleanErrorsInFieldData = fieldData => mergeRight(fieldData, { error: false, errors: [] })\n\nexport const checkRequiredFieldData = (value, fieldData) => {\n  if (fieldData.required === true && (isNil(value) || isEmpty(value))) {\n    return mergeRight(fieldData, { error: true, errors: [`the field ${fieldData.name} is required`] })\n  }\n  return fieldData\n}\n"]}]}