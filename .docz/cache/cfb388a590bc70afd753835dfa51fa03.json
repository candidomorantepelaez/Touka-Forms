{"remainingRequest":"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/preset-env\",\"@babel/react\",[\"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-proposal-class-properties\",[\"module-resolver\",{\"root\":[\"./src\"]}],[\"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/docz-core/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/form-functions.js","dependencies":[{"path":"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/form-functions.js","mtime":1549051083883},{"path":"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/cache-loader/dist/cjs.js","mtime":1547306037965},{"path":"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/babel-loader/lib/index.js","mtime":1547246468683}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { find, findIndex, append, update, has, mergeRight, none, reduce, objOf, map, isNil, concat, is } from 'ramda';\nexport var selectField = function selectField(fieldName, fields) {\n  return find(function (obj) {\n    return obj.name === fieldName;\n  }, fields);\n};\nexport var getIndexOfFieldData = function getIndexOfFieldData(fieldData, fields) {\n  return findIndex(function (obj) {\n    return obj.name === fieldData.name;\n  }, fields);\n};\nexport var insertFieldDataInFields = function insertFieldDataInFields(fieldData, fields) {\n  var indexField = getIndexOfFieldData(fieldData, fields);\n\n  if (indexField < 0) {\n    return append(fieldData, fields);\n  }\n\n  return update(indexField, fieldData, fields);\n};\nexport var insertInitialDataInFieldData = function insertInitialDataInFieldData(fieldData, initialValue) {\n  if (has(fieldData.name, initialValue)) {\n    return mergeRight(fieldData, {\n      value: initialValue[fieldData.name]\n    });\n  }\n\n  return fieldData;\n};\nexport var isAllFieldsCorrect = function isAllFieldsCorrect(fields) {\n  return none(function (obj) {\n    return obj.error === true;\n  }, fields);\n};\nexport var getValuesForSubmit = function getValuesForSubmit(fields) {\n  return reduce(function (acc, obj) {\n    return mergeRight(acc, objOf(obj.name)(obj.value));\n  }, {}, fields);\n};\nexport var updateFieldDataInFields = function updateFieldDataInFields(fieldData, fields) {\n  var indexField = getIndexOfFieldData(fieldData, fields);\n\n  if (indexField < 0) {\n    return fields;\n  }\n\n  return update(indexField, fieldData, fields);\n};\nexport var resetFieldsToInitialValue = function resetFieldsToInitialValue(fields, initialValue) {\n  return map(function (fieldData) {\n    return insertInitialDataInFieldData(fieldData, initialValue);\n  }, fields);\n};\nexport var insertErrorsInFieldData = function insertErrorsInFieldData(field, errors) {\n  var errorForThisField = find(function (error) {\n    return error.name === field.name;\n  }, errors);\n\n  if (isNil(errorForThisField)) {\n    return field;\n  }\n\n  if (isNil(field.errors) || !is(Array, field.errors)) {\n    return mergeRight(field, {\n      error: true,\n      errors: errorForThisField.errors\n    });\n  }\n\n  return mergeRight(field, {\n    error: true,\n    errors: concat(errorForThisField.errors, field.errors)\n  });\n};\nexport var handlerGlobalErrorsOfValidation = function handlerGlobalErrorsOfValidation(result) {\n  if (isNil(result.global)) {\n    return [];\n  }\n\n  return result.global;\n};\nexport var handlerFieldsDataErrorsOfValidation = function handlerFieldsDataErrorsOfValidation(result, fields) {\n  if (isNil(result.fields)) {\n    return fields;\n  }\n\n  return map(function (obj) {\n    return insertErrorsInFieldData(obj, result.fields);\n  }, fields);\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(selectField, \"selectField\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/form-functions.js\");\n  reactHotLoader.register(getIndexOfFieldData, \"getIndexOfFieldData\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/form-functions.js\");\n  reactHotLoader.register(insertFieldDataInFields, \"insertFieldDataInFields\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/form-functions.js\");\n  reactHotLoader.register(insertInitialDataInFieldData, \"insertInitialDataInFieldData\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/form-functions.js\");\n  reactHotLoader.register(isAllFieldsCorrect, \"isAllFieldsCorrect\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/form-functions.js\");\n  reactHotLoader.register(getValuesForSubmit, \"getValuesForSubmit\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/form-functions.js\");\n  reactHotLoader.register(updateFieldDataInFields, \"updateFieldDataInFields\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/form-functions.js\");\n  reactHotLoader.register(resetFieldsToInitialValue, \"resetFieldsToInitialValue\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/form-functions.js\");\n  reactHotLoader.register(insertErrorsInFieldData, \"insertErrorsInFieldData\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/form-functions.js\");\n  reactHotLoader.register(handlerGlobalErrorsOfValidation, \"handlerGlobalErrorsOfValidation\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/form-functions.js\");\n  reactHotLoader.register(handlerFieldsDataErrorsOfValidation, \"handlerFieldsDataErrorsOfValidation\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/form-functions.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/home/kan/desarrollo/proyectos/components/touka-forms/src/functions/form-functions.js"],"names":["find","findIndex","append","update","has","mergeRight","none","reduce","objOf","map","isNil","concat","is","selectField","fieldName","fields","obj","name","getIndexOfFieldData","fieldData","insertFieldDataInFields","indexField","insertInitialDataInFieldData","initialValue","value","isAllFieldsCorrect","error","getValuesForSubmit","acc","updateFieldDataInFields","resetFieldsToInitialValue","insertErrorsInFieldData","field","errors","errorForThisField","Array","handlerGlobalErrorsOfValidation","result","global","handlerFieldsDataErrorsOfValidation"],"mappings":"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","sourcesContent":["import {\n  find, findIndex, append, update, has, mergeRight, none, reduce, objOf, map, isNil, concat, is,\n} from 'ramda'\n\n\nexport const selectField = (fieldName, fields) => find(obj => obj.name === fieldName, fields)\n\nexport const getIndexOfFieldData = (fieldData, fields) => findIndex(obj => obj.name === fieldData.name, fields)\n\nexport const insertFieldDataInFields = (fieldData, fields) => {\n  const indexField = getIndexOfFieldData(fieldData, fields)\n  if (indexField < 0) {\n    return append(fieldData, fields)\n  }\n  return update(indexField, fieldData, fields)\n}\n\nexport const insertInitialDataInFieldData = (fieldData, initialValue) => {\n  if (has(fieldData.name, initialValue)) {\n    return mergeRight(fieldData, { value: initialValue[fieldData.name] })\n  }\n  return fieldData\n}\n\nexport const isAllFieldsCorrect = fields => none(obj => obj.error === true, fields)\n\nexport const getValuesForSubmit = fields => reduce((acc, obj) => mergeRight(acc, objOf(obj.name)(obj.value)), {}, fields)\n\nexport const updateFieldDataInFields = (fieldData, fields) => {\n  const indexField = getIndexOfFieldData(fieldData, fields)\n  if (indexField < 0) {\n    return fields\n  }\n  return update(indexField, fieldData, fields)\n}\n\nexport const resetFieldsToInitialValue = (fields, initialValue) => map(fieldData => insertInitialDataInFieldData(fieldData, initialValue), fields)\n\nexport const insertErrorsInFieldData = (field, errors) => {\n  const errorForThisField = find(error => error.name === field.name, errors)\n  if (isNil(errorForThisField)) {\n    return field\n  }\n  if (isNil(field.errors) || !is(Array, field.errors)) {\n    return mergeRight(field, { error: true, errors: errorForThisField.errors })\n  }\n  return mergeRight(field, { error: true, errors: concat(errorForThisField.errors, field.errors) })\n}\n\nexport const handlerGlobalErrorsOfValidation = (result) => {\n  if (isNil(result.global)) {\n    return []\n  }\n  return result.global\n}\n\nexport const handlerFieldsDataErrorsOfValidation = (result, fields) => {\n  if (isNil(result.fields)) {\n    return fields\n  }\n  return map(obj => insertErrorsInFieldData(obj, result.fields), fields)\n}\n"]}]}