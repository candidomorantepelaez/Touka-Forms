{"remainingRequest":"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/preset-env\",\"@babel/react\",[\"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-proposal-class-properties\",[\"module-resolver\",{\"root\":[\"./src\"]}],[\"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/docz-core/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/home/kan/desarrollo/proyectos/components/touka-forms/src/managers/form-context-manager.js","dependencies":[{"path":"/home/kan/desarrollo/proyectos/components/touka-forms/src/managers/form-context-manager.js","mtime":1548025037110},{"path":"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/cache-loader/dist/cjs.js","mtime":1547306037965},{"path":"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/babel-loader/lib/index.js","mtime":1547246468683}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { isNil, isEmpty, reduce, mergeRight, objOf } from 'ramda';\nimport { insertInitialDataInFieldData, insertFieldDataInFields, isAllFieldsCorrect, updateFieldDataInFields, resetFieldsToInitialValue, handlerGlobalErrorsOfValidation, handlerFieldsDataErrorsOfValidation } from \"../functions/form-functions\";\n\nvar FormContextManager =\n/*#__PURE__*/\nfunction () {\n  function FormContextManager(initialValue) {\n    _classCallCheck(this, FormContextManager);\n\n    this.onFieldChange = this.onFieldChange.bind(this);\n    this.onFieldMount = this.onFieldMount.bind(this);\n    this.onResetForm = this.onResetForm.bind(this);\n    this.onSubmitForm = this.onSubmitForm.bind(this);\n    this.onValidationForm = this.onValidationForm.bind(this);\n    this.getValues = this.getValues.bind(this);\n    this.fields = [];\n    this.initialValue = initialValue;\n    this.globalErrorsInForm = [];\n  }\n\n  _createClass(FormContextManager, [{\n    key: \"onFieldChange\",\n    value: function onFieldChange(fieldData) {\n      this.fields = updateFieldDataInFields(fieldData, this.fields);\n      return this.fields;\n    }\n  }, {\n    key: \"onFieldMount\",\n    value: function onFieldMount(fieldData) {\n      var fieldDataWithInitialValue = insertInitialDataInFieldData(fieldData, this.initialValue);\n      this.fields = insertFieldDataInFields(fieldDataWithInitialValue, this.fields);\n      return this.fields;\n    }\n  }, {\n    key: \"onResetForm\",\n    value: function onResetForm() {\n      this.fields = resetFieldsToInitialValue(this.fields, this.initialValue);\n      return this.fields;\n    }\n  }, {\n    key: \"onSubmitForm\",\n    value: function onSubmitForm() {\n      var isFieldCorrect = isAllFieldsCorrect(this.fields);\n      var isFormCorrect = isEmpty(this.globalErrorsInForm);\n\n      if (isFieldCorrect === true && isFormCorrect === true) {\n        return this.getValues();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"onValidationForm\",\n    value: function onValidationForm(result) {\n      if (isNil(result)) {\n        this.globalErrorsInForm = [];\n        return this.fields;\n      }\n\n      this.fields = handlerFieldsDataErrorsOfValidation(result, this.fields);\n      this.globalErrorsInForm = handlerGlobalErrorsOfValidation(result);\n      return this.fields;\n    }\n  }, {\n    key: \"getValues\",\n    value: function getValues() {\n      var valueForFields = reduce(function (acc, obj) {\n        return mergeRight(acc, objOf(obj.name)(obj.value));\n      }, {}, this.fields);\n      return mergeRight(this.initialValue, valueForFields);\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return FormContextManager;\n}();\n\nvar _default = FormContextManager;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(FormContextManager, \"FormContextManager\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/managers/form-context-manager.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/kan/desarrollo/proyectos/components/touka-forms/src/managers/form-context-manager.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/home/kan/desarrollo/proyectos/components/touka-forms/src/managers/form-context-manager.js"],"names":["isNil","isEmpty","reduce","mergeRight","objOf","insertInitialDataInFieldData","insertFieldDataInFields","isAllFieldsCorrect","updateFieldDataInFields","resetFieldsToInitialValue","handlerGlobalErrorsOfValidation","handlerFieldsDataErrorsOfValidation","FormContextManager","initialValue","onFieldChange","bind","onFieldMount","onResetForm","onSubmitForm","onValidationForm","getValues","fields","globalErrorsInForm","fieldData","fieldDataWithInitialValue","isFieldCorrect","isFormCorrect","result","valueForFields","acc","obj","name","value"],"mappings":";;;;;;;;;;;;AAAA,SACEA,KADF,EACSC,OADT,EACkBC,MADlB,EAC0BC,UAD1B,EACsCC,KADtC,QAEO,OAFP;AAGA,SACEC,4BADF,EACgCC,uBADhC,EAEEC,kBAFF,EAEsBC,uBAFtB,EAE+CC,yBAF/C,EAGEC,+BAHF,EAGmCC,mCAHnC;;IAOMC,kB;;;AACJ,8BAAYC,YAAZ,EAA0B;AAAA;;AACxB,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBF,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKG,YAAL,GAAoB,KAAKA,YAAL,CAAkBH,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKI,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBJ,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKK,SAAL,GAAiB,KAAKA,SAAL,CAAeL,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKM,MAAL,GAAc,EAAd;AACA,SAAKR,YAAL,GAAoBA,YAApB;AACA,SAAKS,kBAAL,GAA0B,EAA1B;AACD;;;;kCAEaC,S,EAAW;AACvB,WAAKF,MAAL,GAAcb,uBAAuB,CAACe,SAAD,EAAY,KAAKF,MAAjB,CAArC;AACA,aAAO,KAAKA,MAAZ;AACD;;;iCAEYE,S,EAAW;AACtB,UAAMC,yBAAyB,GAAGnB,4BAA4B,CAACkB,SAAD,EAAY,KAAKV,YAAjB,CAA9D;AACA,WAAKQ,MAAL,GAAcf,uBAAuB,CAACkB,yBAAD,EAA4B,KAAKH,MAAjC,CAArC;AACA,aAAO,KAAKA,MAAZ;AACD;;;kCAEa;AACZ,WAAKA,MAAL,GAAcZ,yBAAyB,CAAC,KAAKY,MAAN,EAAc,KAAKR,YAAnB,CAAvC;AACA,aAAO,KAAKQ,MAAZ;AACD;;;mCAEc;AACb,UAAMI,cAAc,GAAGlB,kBAAkB,CAAC,KAAKc,MAAN,CAAzC;AACA,UAAMK,aAAa,GAAGzB,OAAO,CAAC,KAAKqB,kBAAN,CAA7B;;AACA,UAAIG,cAAc,KAAK,IAAnB,IAA2BC,aAAa,KAAK,IAAjD,EAAuD;AACrD,eAAO,KAAKN,SAAL,EAAP;AACD;;AACD,aAAO,IAAP;AACD;;;qCAEgBO,M,EAAQ;AACvB,UAAI3B,KAAK,CAAC2B,MAAD,CAAT,EAAmB;AACjB,aAAKL,kBAAL,GAA0B,EAA1B;AACA,eAAO,KAAKD,MAAZ;AACD;;AACD,WAAKA,MAAL,GAAcV,mCAAmC,CAACgB,MAAD,EAAS,KAAKN,MAAd,CAAjD;AACA,WAAKC,kBAAL,GAA0BZ,+BAA+B,CAACiB,MAAD,CAAzD;AACA,aAAO,KAAKN,MAAZ;AACD;;;gCAEW;AACV,UAAMO,cAAc,GAAG1B,MAAM,CAAC,UAAC2B,GAAD,EAAMC,GAAN;AAAA,eAAc3B,UAAU,CAAC0B,GAAD,EAAMzB,KAAK,CAAC0B,GAAG,CAACC,IAAL,CAAL,CAAgBD,GAAG,CAACE,KAApB,CAAN,CAAxB;AAAA,OAAD,EAA4D,EAA5D,EAAgE,KAAKX,MAArE,CAA7B;AACA,aAAOlB,UAAU,CAAC,KAAKU,YAAN,EAAoBe,cAApB,CAAjB;AACD;;;;;;;;;;;;;eAGYhB,kB;AAAf;;;;;;;;;;;;0BAtDMA,kB","sourcesContent":["import {\n  isNil, isEmpty, reduce, mergeRight, objOf,\n} from 'ramda'\nimport {\n  insertInitialDataInFieldData, insertFieldDataInFields,\n  isAllFieldsCorrect, updateFieldDataInFields, resetFieldsToInitialValue,\n  handlerGlobalErrorsOfValidation, handlerFieldsDataErrorsOfValidation,\n} from 'functions/form-functions'\n\n\nclass FormContextManager {\n  constructor(initialValue) {\n    this.onFieldChange = this.onFieldChange.bind(this)\n    this.onFieldMount = this.onFieldMount.bind(this)\n    this.onResetForm = this.onResetForm.bind(this)\n    this.onSubmitForm = this.onSubmitForm.bind(this)\n    this.onValidationForm = this.onValidationForm.bind(this)\n    this.getValues = this.getValues.bind(this)\n    this.fields = []\n    this.initialValue = initialValue\n    this.globalErrorsInForm = []\n  }\n\n  onFieldChange(fieldData) {\n    this.fields = updateFieldDataInFields(fieldData, this.fields)\n    return this.fields\n  }\n\n  onFieldMount(fieldData) {\n    const fieldDataWithInitialValue = insertInitialDataInFieldData(fieldData, this.initialValue)\n    this.fields = insertFieldDataInFields(fieldDataWithInitialValue, this.fields)\n    return this.fields\n  }\n\n  onResetForm() {\n    this.fields = resetFieldsToInitialValue(this.fields, this.initialValue)\n    return this.fields\n  }\n\n  onSubmitForm() {\n    const isFieldCorrect = isAllFieldsCorrect(this.fields)\n    const isFormCorrect = isEmpty(this.globalErrorsInForm)\n    if (isFieldCorrect === true && isFormCorrect === true) {\n      return this.getValues()\n    }\n    return null\n  }\n\n  onValidationForm(result) {\n    if (isNil(result)) {\n      this.globalErrorsInForm = []\n      return this.fields\n    }\n    this.fields = handlerFieldsDataErrorsOfValidation(result, this.fields)\n    this.globalErrorsInForm = handlerGlobalErrorsOfValidation(result)\n    return this.fields\n  }\n\n  getValues() {\n    const valueForFields = reduce((acc, obj) => mergeRight(acc, objOf(obj.name)(obj.value)), {}, this.fields)\n    return mergeRight(this.initialValue, valueForFields)\n  }\n}\n\nexport default FormContextManager\n"]}]}