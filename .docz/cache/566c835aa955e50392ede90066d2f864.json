{"remainingRequest":"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/preset-env\",\"@babel/react\",[\"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-proposal-class-properties\",[\"module-resolver\",{\"root\":[\"./src\"]}],[\"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/docz-core/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/home/kan/desarrollo/proyectos/components/touka-forms/src/managers/form-context-manager.js","dependencies":[{"path":"/home/kan/desarrollo/proyectos/components/touka-forms/src/managers/form-context-manager.js","mtime":1548025037110},{"path":"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/cache-loader/dist/cjs.js","mtime":1547306037965},{"path":"/home/kan/desarrollo/proyectos/components/touka-forms/node_modules/babel-loader/lib/index.js","mtime":1547246468683}],"contextDependencies":[],"result":["function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}import{isNil,isEmpty,reduce,mergeRight,objOf}from'ramda';import{insertInitialDataInFieldData,insertFieldDataInFields,isAllFieldsCorrect,updateFieldDataInFields,resetFieldsToInitialValue,handlerGlobalErrorsOfValidation,handlerFieldsDataErrorsOfValidation}from\"../functions/form-functions\";var FormContextManager=/*#__PURE__*/function(){function FormContextManager(initialValue){_classCallCheck(this,FormContextManager);this.onFieldChange=this.onFieldChange.bind(this);this.onFieldMount=this.onFieldMount.bind(this);this.onResetForm=this.onResetForm.bind(this);this.onSubmitForm=this.onSubmitForm.bind(this);this.onValidationForm=this.onValidationForm.bind(this);this.getValues=this.getValues.bind(this);this.fields=[];this.initialValue=initialValue;this.globalErrorsInForm=[];}_createClass(FormContextManager,[{key:\"onFieldChange\",value:function onFieldChange(fieldData){this.fields=updateFieldDataInFields(fieldData,this.fields);return this.fields;}},{key:\"onFieldMount\",value:function onFieldMount(fieldData){var fieldDataWithInitialValue=insertInitialDataInFieldData(fieldData,this.initialValue);this.fields=insertFieldDataInFields(fieldDataWithInitialValue,this.fields);return this.fields;}},{key:\"onResetForm\",value:function onResetForm(){this.fields=resetFieldsToInitialValue(this.fields,this.initialValue);return this.fields;}},{key:\"onSubmitForm\",value:function onSubmitForm(){var isFieldCorrect=isAllFieldsCorrect(this.fields);var isFormCorrect=isEmpty(this.globalErrorsInForm);if(isFieldCorrect===true&&isFormCorrect===true){return this.getValues();}return null;}},{key:\"onValidationForm\",value:function onValidationForm(result){if(isNil(result)){this.globalErrorsInForm=[];return this.fields;}this.fields=handlerFieldsDataErrorsOfValidation(result,this.fields);this.globalErrorsInForm=handlerGlobalErrorsOfValidation(result);return this.fields;}},{key:\"getValues\",value:function getValues(){var valueForFields=reduce(function(acc,obj){return mergeRight(acc,objOf(obj.name)(obj.value));},{},this.fields);return mergeRight(this.initialValue,valueForFields);}}]);return FormContextManager;}();export default FormContextManager;",{"version":3,"sources":["/home/kan/desarrollo/proyectos/components/touka-forms/src/managers/form-context-manager.js"],"names":["isNil","isEmpty","reduce","mergeRight","objOf","insertInitialDataInFieldData","insertFieldDataInFields","isAllFieldsCorrect","updateFieldDataInFields","resetFieldsToInitialValue","handlerGlobalErrorsOfValidation","handlerFieldsDataErrorsOfValidation","FormContextManager","initialValue","onFieldChange","bind","onFieldMount","onResetForm","onSubmitForm","onValidationForm","getValues","fields","globalErrorsInForm","fieldData","fieldDataWithInitialValue","isFieldCorrect","isFormCorrect","result","valueForFields","acc","obj","name","value"],"mappings":"unBAAA,OACEA,KADF,CACSC,OADT,CACkBC,MADlB,CAC0BC,UAD1B,CACsCC,KADtC,KAEO,OAFP,CAGA,OACEC,4BADF,CACgCC,uBADhC,CAEEC,kBAFF,CAEsBC,uBAFtB,CAE+CC,yBAF/C,CAGEC,+BAHF,CAGmCC,mCAHnC,mC,GAOMC,CAAAA,kB,yBACJ,4BAAYC,YAAZ,CAA0B,0CACxB,KAAKC,aAAL,CAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB,CACA,KAAKC,YAAL,CAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB,CACA,KAAKE,WAAL,CAAmB,KAAKA,WAAL,CAAiBF,IAAjB,CAAsB,IAAtB,CAAnB,CACA,KAAKG,YAAL,CAAoB,KAAKA,YAAL,CAAkBH,IAAlB,CAAuB,IAAvB,CAApB,CACA,KAAKI,gBAAL,CAAwB,KAAKA,gBAAL,CAAsBJ,IAAtB,CAA2B,IAA3B,CAAxB,CACA,KAAKK,SAAL,CAAiB,KAAKA,SAAL,CAAeL,IAAf,CAAoB,IAApB,CAAjB,CACA,KAAKM,MAAL,CAAc,EAAd,CACA,KAAKR,YAAL,CAAoBA,YAApB,CACA,KAAKS,kBAAL,CAA0B,EAA1B,CACD,C,mFAEaC,S,CAAW,CACvB,KAAKF,MAAL,CAAcb,uBAAuB,CAACe,SAAD,CAAY,KAAKF,MAAjB,CAArC,CACA,MAAO,MAAKA,MAAZ,CACD,C,kDAEYE,S,CAAW,CACtB,GAAMC,CAAAA,yBAAyB,CAAGnB,4BAA4B,CAACkB,SAAD,CAAY,KAAKV,YAAjB,CAA9D,CACA,KAAKQ,MAAL,CAAcf,uBAAuB,CAACkB,yBAAD,CAA4B,KAAKH,MAAjC,CAArC,CACA,MAAO,MAAKA,MAAZ,CACD,C,iDAEa,CACZ,KAAKA,MAAL,CAAcZ,yBAAyB,CAAC,KAAKY,MAAN,CAAc,KAAKR,YAAnB,CAAvC,CACA,MAAO,MAAKQ,MAAZ,CACD,C,mDAEc,CACb,GAAMI,CAAAA,cAAc,CAAGlB,kBAAkB,CAAC,KAAKc,MAAN,CAAzC,CACA,GAAMK,CAAAA,aAAa,CAAGzB,OAAO,CAAC,KAAKqB,kBAAN,CAA7B,CACA,GAAIG,cAAc,GAAK,IAAnB,EAA2BC,aAAa,GAAK,IAAjD,CAAuD,CACrD,MAAO,MAAKN,SAAL,EAAP,CACD,CACD,MAAO,KAAP,CACD,C,0DAEgBO,M,CAAQ,CACvB,GAAI3B,KAAK,CAAC2B,MAAD,CAAT,CAAmB,CACjB,KAAKL,kBAAL,CAA0B,EAA1B,CACA,MAAO,MAAKD,MAAZ,CACD,CACD,KAAKA,MAAL,CAAcV,mCAAmC,CAACgB,MAAD,CAAS,KAAKN,MAAd,CAAjD,CACA,KAAKC,kBAAL,CAA0BZ,+BAA+B,CAACiB,MAAD,CAAzD,CACA,MAAO,MAAKN,MAAZ,CACD,C,6CAEW,CACV,GAAMO,CAAAA,cAAc,CAAG1B,MAAM,CAAC,SAAC2B,GAAD,CAAMC,GAAN,QAAc3B,CAAAA,UAAU,CAAC0B,GAAD,CAAMzB,KAAK,CAAC0B,GAAG,CAACC,IAAL,CAAL,CAAgBD,GAAG,CAACE,KAApB,CAAN,CAAxB,EAAD,CAA4D,EAA5D,CAAgE,KAAKX,MAArE,CAA7B,CACA,MAAOlB,CAAAA,UAAU,CAAC,KAAKU,YAAN,CAAoBe,cAApB,CAAjB,CACD,C,kCAGH,cAAehB,CAAAA,kBAAf","sourcesContent":["import {\n  isNil, isEmpty, reduce, mergeRight, objOf,\n} from 'ramda'\nimport {\n  insertInitialDataInFieldData, insertFieldDataInFields,\n  isAllFieldsCorrect, updateFieldDataInFields, resetFieldsToInitialValue,\n  handlerGlobalErrorsOfValidation, handlerFieldsDataErrorsOfValidation,\n} from 'functions/form-functions'\n\n\nclass FormContextManager {\n  constructor(initialValue) {\n    this.onFieldChange = this.onFieldChange.bind(this)\n    this.onFieldMount = this.onFieldMount.bind(this)\n    this.onResetForm = this.onResetForm.bind(this)\n    this.onSubmitForm = this.onSubmitForm.bind(this)\n    this.onValidationForm = this.onValidationForm.bind(this)\n    this.getValues = this.getValues.bind(this)\n    this.fields = []\n    this.initialValue = initialValue\n    this.globalErrorsInForm = []\n  }\n\n  onFieldChange(fieldData) {\n    this.fields = updateFieldDataInFields(fieldData, this.fields)\n    return this.fields\n  }\n\n  onFieldMount(fieldData) {\n    const fieldDataWithInitialValue = insertInitialDataInFieldData(fieldData, this.initialValue)\n    this.fields = insertFieldDataInFields(fieldDataWithInitialValue, this.fields)\n    return this.fields\n  }\n\n  onResetForm() {\n    this.fields = resetFieldsToInitialValue(this.fields, this.initialValue)\n    return this.fields\n  }\n\n  onSubmitForm() {\n    const isFieldCorrect = isAllFieldsCorrect(this.fields)\n    const isFormCorrect = isEmpty(this.globalErrorsInForm)\n    if (isFieldCorrect === true && isFormCorrect === true) {\n      return this.getValues()\n    }\n    return null\n  }\n\n  onValidationForm(result) {\n    if (isNil(result)) {\n      this.globalErrorsInForm = []\n      return this.fields\n    }\n    this.fields = handlerFieldsDataErrorsOfValidation(result, this.fields)\n    this.globalErrorsInForm = handlerGlobalErrorsOfValidation(result)\n    return this.fields\n  }\n\n  getValues() {\n    const valueForFields = reduce((acc, obj) => mergeRight(acc, objOf(obj.name)(obj.value)), {}, this.fields)\n    return mergeRight(this.initialValue, valueForFields)\n  }\n}\n\nexport default FormContextManager\n"]}]}